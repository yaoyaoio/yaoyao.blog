<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yaoyao.blog</id>
    <title>YaoYao&apos;s blog</title>
    <updated>2023-02-14T10:39:53.716Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yaoyao.blog"/>
    <link rel="self" href="https://yaoyao.blog/atom.xml"/>
    <subtitle>Have a great day.</subtitle>
    <logo>https://yaoyao.blog/images/avatar.png</logo>
    <icon>https://yaoyao.blog/favicon.ico</icon>
    <rights>All rights reserved 2023, YaoYao&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[2022 简单总结]]></title>
        <id>https://yaoyao.blog/post/2022-review/</id>
        <link href="https://yaoyao.blog/post/2022-review/">
        </link>
        <updated>2022-12-30T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="2022-简单总结">2022 简单总结</h1>
<h2 id="我的书单">我的书单</h2>
<table>
<thead>
<tr>
<th style="text-align:left">书名</th>
<th style="text-align:center">进度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">(极客时间)kafka 核心技术与实战</td>
<td style="text-align:center">100%</td>
</tr>
<tr>
<td style="text-align:left">(极客时间)eBPF 核心技术与实战</td>
<td style="text-align:center">100%</td>
</tr>
<tr>
<td style="text-align:left">(极客时间)Go 并发编程实战课</td>
<td style="text-align:center">100%</td>
</tr>
<tr>
<td style="text-align:left">(极客时间)操作系统实战 45 讲</td>
<td style="text-align:center">100%</td>
</tr>
<tr>
<td style="text-align:left">操作系统概念</td>
<td style="text-align:center">70%</td>
</tr>
<tr>
<td style="text-align:left">深入理解 linux 网络技术内幕</td>
<td style="text-align:center">只阅读了二层和三层 翻译的跟狗屎一样 是在读不下去了</td>
</tr>
<tr>
<td style="text-align:left">深入 Linux 内核架构</td>
<td style="text-align:center">只阅读进程调度部分 为了学习 CPU 使用率计算方式及 CGROUP 原理｜</td>
</tr>
<tr>
<td style="text-align:left">Linux 设备驱动程序</td>
<td style="text-align:center">只阅读 PCIE 和 DMA 为了学习物理网卡初始化</td>
</tr>
<tr>
<td style="text-align:left">设计数据密集型应用</td>
<td style="text-align:center">30%</td>
</tr>
<tr>
<td style="text-align:left">风格感觉：21 世纪写作指南</td>
<td style="text-align:center">10%</td>
</tr>
<tr>
<td style="text-align:left">高效阅读：开启阅读“超能力”</td>
<td style="text-align:center">20%</td>
</tr>
</tbody>
</table>
<h2 id="我的学习">我的学习</h2>
<ul>
<li>年初的时候研究了内核三级页表的实现</li>
<li>入门 react.js 及 typescript 写了一个简单的后台</li>
<li>着重学习了 linux 网络 看了一部分 linux 网络的源码并且研究了 kubernetes 不同网络插件的原理</li>
<li>给一个项目搞了一个月的 SQL 优化 对数据库的理解又近了一步</li>
<li>跟着大佬研究下链路优化 虽然也没咋研究明白</li>
<li>花了半个月研究下 linux cpu 使用率的计算方式 包括时钟周期 中断 cgroup cfs 等 但是现在已经不记得了</li>
<li>用 kubesphere 和 jenkinsfile pipeline 给一个项目搞了一套 CICD 虽然很简单也是也算在学习里吧</li>
<li>年底的时候学习了 LSM-Tree 和市面上分布式数据库大概的实现原理 LSM-Tree 跟着教程和代码用 rust 实现了一半</li>
</ul>
<h2 id="我的资产">我的资产</h2>
<p>今年比较惨 这几天算了一下发现今年少了 42 万左右（工资+投资赔的很惨）</p>
<h2 id="我的生活">我的生活</h2>
<p>今年总体还是保持了基本生活水平 下半年搞了一套完整的 Desktop Tour 和群晖 NAS 这两个让我很开心 其他方面总体来说还算过得去</p>
<h2 id="我的英语">我的英语</h2>
<p>这个东西说了实在太惭愧了 今年上了应该有 20 多节课 学了好几年(其实没怎么学) 也一直没怎么学明白  目前看不会英语基本等于文盲<br>
希望我也能继续学下去</p>
<h2 id="最后">最后</h2>
<p>今年本来想学习下如何写作和阅读 但是进度一直很慢 实在是懒 所以以上的总结看起来也跟狗屎一样 标点符号都没用明白 希望接下来能好好学一下</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 群晖 NAS 和 Calibre-Web 搭建个人图书馆]]></title>
        <id>https://yaoyao.blog/post/nas-deploy-calibre-web/</id>
        <link href="https://yaoyao.blog/post/nas-deploy-calibre-web/">
        </link>
        <updated>2022-12-20T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用-群晖-nas-和-calibre-web-搭建个人图书馆">使用 群晖 NAS 和 Calibre-Web 搭建个人图书馆</h1>
<p>::: tip  我的环境<br>
群晖 NAS 产品型号：DS1522+</p>
<p>群晖 NAS DSM 版本：DSM 7.1.1-42962 Update 2</p>
<p>calibre-web 镜像版本：linuxserver/calibre-web:0.6.19<br>
:::</p>
<h2 id="部署-calibre-web">部署 Calibre-Web</h2>
<h3 id="搜索镜像并下载">搜索镜像并下载</h3>
<p>在群晖 DSM 中，打开 <code>Docker</code> 套件，在 <code>注册表</code> 中搜索 <code>calibre-web</code>，并选择对应的镜像及版本下载：</p>
<p>在这里 我选择的是： <code>linuxserver/calibre-web</code> 版本为： <code>0.6.19</code></p>
<p>点击 <code>选择</code> 后即可会自动下载</p>
<figure data-type="image" tabindex="1"><img src="https://i.yaoyao.site/blog/nas-calibre-web-download.png" alt="搜索及下载镜像|1000" loading="lazy"></figure>
<h3 id="创建容器">创建容器</h3>
<p>在 <code>容器</code>  中点击 <code>新增</code> 选择对应版本的镜像点击 <code>下一步</code></p>
<figure data-type="image" tabindex="2"><img src="https://i.yaoyao.site/blog/nas-calibre-web-create.png" alt="创建容器选择镜像|1000" loading="lazy"></figure>
<h3 id="配置容器网络">配置容器网络</h3>
<p>在这里我选择了和 Docker Host 相同的网络 你也可以选择 Birdge 然后把 8083 端口暴露出来</p>
<figure data-type="image" tabindex="3"><img src="https://i.yaoyao.site/blog/nas-calibre-web-network.png" alt="配置容器网络|1000" loading="lazy"></figure>
<h3 id="容器常规设置">容器常规设置</h3>
<p>在这里我勾选了 <code>启用自动重新启动</code> 然后点击 <code>高级设置</code></p>
<figure data-type="image" tabindex="4"><img src="https://i.yaoyao.site/blog/nas-calibre-web-basic-set.png" alt="容器常规设置|1000" loading="lazy"></figure>
<h3 id="配置容器环境变量">配置容器环境变量</h3>
<figure data-type="image" tabindex="5"><img src="https://i.yaoyao.site/blog/nas-calibre-web-env-set.png" alt="高级设置配置环境变量|1000" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>变量</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>TZ</td>
<td>Asia/Shanghai</td>
<td>时区配置</td>
</tr>
<tr>
<td>DOCKER_MODS</td>
<td>linuxserver/mods: universal-calibre</td>
<td>电子书转换能力</td>
</tr>
<tr>
<td>OAUTHLIB_RELAX_TOKEN_SCOPE</td>
<td>1</td>
<td>允许 Google OAUTH 工作</td>
</tr>
<tr>
<td>https_proxy</td>
<td>http://127.0.0.1:7890</td>
<td>配置了自己的代理方便下载</td>
</tr>
</tbody>
</table>
<p><strong>注： 这些都是可选配置</strong></p>
<p>配置完之后点击 <code>保存</code> 然后再点击 <code>下一步</code></p>
<h3 id="容器存储空间设置">容器存储空间设置</h3>
<p>共享文件夹的创建请点击 <a href="#%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9">这里查看</a></p>
<figure data-type="image" tabindex="6"><img src="https://i.yaoyao.site/blog/nas-calibre-web-volume.png" alt="存储空间设置|1000" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>本地文件夹</th>
<th>装载路径</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>/docker/calibre/books</td>
<td>/books</td>
<td>书籍存放目录</td>
</tr>
<tr>
<td>/docker/calibre/config</td>
<td>/config</td>
<td>配置目录</td>
</tr>
</tbody>
</table>
<p>然后点击 <code>下一步</code></p>
<h3 id="容器创建最后">容器创建最后</h3>
<p>此处可以看一下自己配置有没有问题 如果有问题点击 <code>上一步</code> 如果没问题则点击 <code>完成</code></p>
<figure data-type="image" tabindex="7"><img src="https://i.yaoyao.site/blog/nas-calibre-web-more.png" alt="摘要|1000" loading="lazy"></figure>
<h3 id="查看启动日志">查看启动日志</h3>
<p>这个地方会慢一些</p>
<figure data-type="image" tabindex="8"><img src="https://i.yaoyao.site/blog/nas-calibre-web-run-log.png" alt="查看启动日志" loading="lazy"></figure>
<h2 id="访问及管理-calibre-web-服务">访问及管理 Calibre-Web 服务</h2>
<h3 id="使用浏览器访问">使用浏览器访问</h3>
<p>使用浏览器打开 http://{你的群晖地址}:8083</p>
<p>默认登录账号为：<code>admin/admin123</code></p>
<figure data-type="image" tabindex="9"><img src="https://i.yaoyao.site/blog/nas-calibre-web-browser.png" alt="访问服务" loading="lazy"></figure>
<h3 id="配置数据库路径">配置数据库路径</h3>
<p>输入 <code>/books</code> 即可</p>
<figure data-type="image" tabindex="10"><img src="https://i.yaoyao.site/blog/nas-calibre-web-db-config.png" alt="" loading="lazy"></figure>
<p>如果出现 <code>DB Location is not Valid, Please Enter Correct Path</code> 请点击 <a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">这里查看</a></p>
<h3 id="配置语言">配置语言</h3>
<p>点击右上角 <code>admin</code> 然后修改 <code>语言</code></p>
<figure data-type="image" tabindex="11"><img src="https://i.yaoyao.site/blog/nas-calibre-web-lang-set.png" alt="" loading="lazy"></figure>
<p>其他配置自己摸索吧 这里就不多讲了。</p>
<h2 id="创建共享文件夹">创建共享文件夹</h2>
<p>打开 <code>控制面板</code> 在 <code>共享文件夹</code> 里 创建名为 <code>docker</code> 的文件夹 其余设置均为默认</p>
<p>打开 <code>File Station</code> 在 docker 文件夹中创建名为 <code>calibre</code> 的文件夹</p>
<p>并且在 <code>calibre</code> 文件夹中创建 名为 <code>books</code> 和 <code>config</code> 两个文件夹</p>
<p><code>calibre</code> 文件夹及权限配置如图所示：</p>
<figure data-type="image" tabindex="12"><img src="https://i.yaoyao.site/blog/nas-calibre-web-sharefile.png" alt="创建共享文件夹|1000" loading="lazy"></figure>
<h2 id="使用-第三方-douban-接口作为元数据提供者">使用 第三方 douban 接口作为元数据提供者</h2>
<p>虽然 0.6.19 版本重新提供了 <code>douban</code> 接口。<code>metadata_provider</code> 目录下有好几种元数据提供者，但是我这一直刷新不出来 索性还是用第三方提供的接口吧</p>
<figure data-type="image" tabindex="13"><img src="https://i.yaoyao.site/blog/nas-calibre-web-get-matadata-error.png" alt="|1000" loading="lazy"></figure>
<p>我用的是 <code>https://github.com/fugary/calibre-web-douban-api</code> 提供的接口</p>
<h3 id="配置">配置</h3>
<p>打开 <code>File Station</code> 在 docker/calibre 下创建名为 <code>metadata_provider</code> 的文件夹 然后将 <code>NewDouban.py</code> 放到了该文件夹下</p>
<figure data-type="image" tabindex="14"><img src="https://i.yaoyao.site/blog/nas-calibre-web-douban.png" alt="豆瓣目录|1000" loading="lazy"></figure>
<p>将该 <code>calibre-web</code> 容器停止 然后编辑该容器</p>
<figure data-type="image" tabindex="15"><img src="https://i.yaoyao.site/blog/nas-calibre-web-edit-volume.png" alt="编辑|1000" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>本地文件夹</th>
<th>装载路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>/docker/calibre/metadata_provider</td>
<td>/app/calibre-web/cps/metadata_provider</td>
</tr>
</tbody>
</table>
<p>然后启动点击 <code>保存</code> 并启动该容器</p>
<h3 id="测试一下">测试一下</h3>
<p>在页面随便找本书点击 <code>获取元数据</code></p>
<figure data-type="image" tabindex="16"><img src="https://i.yaoyao.site/blog/nas-calibre-web-get-metadata.png" alt="" loading="lazy"></figure>
<h2 id="常见问题">常见问题</h2>
<h3 id="advocate-模块问题">advocate 模块问题</h3>
<p>如果在页面中保存书籍元数据时会提示 advocate 模块不存在</p>
<p>原因是没有正确安装该模块</p>
<p>解决办法：</p>
<p>进入容器中执行</p>
<pre><code class="language-bash">cd /app/calibre-web/
pip3 install -r requirements.txt
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://i.yaoyao.site/blog/nas-calibre-web-pip-requirements.png" alt="安装依赖" loading="lazy"></figure>
<p>如果在页面中保存书籍元数据时会提示 <code>Error editing book: Proxies cannot be used with Advocate</code></p>
<p>原因是配置了代理和该模块冲突</p>
<p>解决办法：</p>
<p>可以将 <code>https_proxy</code> 从环境变量中去掉 或<br>
给容器添加环境变量 <code>CALIBRE_LOCALHOST=true</code></p>
<h3 id="使用-pip-会提示-modulenotfounderror-no-module-named-distutilscmd">使用 pip 会提示  <code>ModuleNotFoundError: No module named 'distutils.cmd'</code></h3>
<p>如果在容器里使用 pip 出现了 <code>ModuleNotFoundError: No module named 'distutils.cmd'</code></p>
<p>解决办法：</p>
<p>进入容器中执行</p>
<pre><code class="language-bash">apt-get install python3-distutils -y
</code></pre>
<figure data-type="image" tabindex="18"><img src="https://i.yaoyao.site/blog/nas-calibre-web-apt-python3-distutils.png" alt="安装 Python 依赖" loading="lazy"></figure>
<h3 id="google-scholar-模块问题">google scholar 模块问题</h3>
<p>我在运行 calibre-web 的时候 该模块会导致我的整个流程卡住</p>
<p>解决办法：</p>
<p>进入容器中卸载该模块</p>
<pre><code class="language-bash">pip uninstall scholarly -y
</code></pre>
<h3 id="pyqt-问题">PyQt 问题</h3>
<p>如果出现以下错误</p>
<p><code>Failed to import PyQt module: PyQt6.QtWebEngineCore with error: libXtst.so.6: cannot open shared object file: No such file or directory</code></p>
<p>解决办法：</p>
<p>进入容器中执行</p>
<pre><code class="language-bash">apt update; apt upgrade libgl1-mesa-glx libxdamage1 libegl1 libxkbcommon0 libopengl0 -y
</code></pre>
<h3 id="数据库路径配置错误">数据库路径配置错误</h3>
<p>如果出现 <code>DB Location is not Valid, Please Enter Correct Path</code></p>
<p>原因是因为 /books/ 目录下需要一个 <code>metadata.db</code></p>
<p>可以用电脑下载 <code>calibre</code> 应用 初始配置会生成一个 <code>metadata.db</code> 然后将 <code>metadata.db</code>  放到 <code>books</code> 文件夹下</p>
<figure data-type="image" tabindex="19"><img src="https://i.yaoyao.site/blog/nas-calibre-web-matadatadb-file.png" alt="" loading="lazy"></figure>
<p>然后在页面重新配置数据库路径即可</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>https://github.com/gshang2017/docker/issues/120</li>
<li>https://www.cnblogs.com/sexintercourse/p/16927455.html</li>
<li>https://fugary.com/?p=203</li>
</ul>
<h2 id="写在最后">写在最后</h2>
<p>自己尝试吧 有问题可以留言。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Remotely Save 和 WebDAV Server 将 Obsidian 数据同步到群晖 NAS]]></title>
        <id>https://yaoyao.blog/post/nas-sync-obsidian/</id>
        <link href="https://yaoyao.blog/post/nas-sync-obsidian/">
        </link>
        <updated>2022-11-30T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用-remotely-save-和-webdav-server-将-obsidian-数据同步到群晖-nas">使用 Remotely Save 和 WebDAV Server 将 Obsidian 数据同步到群晖 NAS</h1>
<p>::: tip  我的环境</p>
<p>群晖 NAS 产品型号：DS1522+</p>
<p>群晖 NAS DSM 版本：DSM 7.1.1-42962 Update 2</p>
<p>Mac 型号：MacBook Pro 14-inch, 2021</p>
<p>Mac 系统：Ventura</p>
<p>Obsidian： Version 1.0.3 (Installer 1.0.0)<br>
:::</p>
<h2 id="在群晖-nas-开启-webdav-server">在群晖 NAS 开启 WebDAV Server</h2>
<h3 id="安装-webdav-server">安装 WebDAV Server</h3>
<ol>
<li>使用 <strong>管理员</strong> 帐户登录 DSM</li>
<li>打开 <strong>套件中心</strong></li>
<li>搜索 <strong>WebDAV Server</strong> 并安装</li>
</ol>
<p>如图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://i.yaoyao.site/blog/nas-install-webdav.png" alt="安装 WebDAV|968" loading="lazy"></figure>
<h3 id="配置-webdav-server">配置 WebDAV Server</h3>
<ol>
<li>进入菜单 打开 <strong>WebDAV Server</strong></li>
</ol>
<p>如图所示：</p>
<figure data-type="image" tabindex="2"><img src="https://i.yaoyao.site/blog/nas-open-webdav.png" alt="打开 WebDAV|868" loading="lazy"></figure>
<ol start="2">
<li>修改配置并应用</li>
</ol>
<p><strong>如果什么都不改可以直接点击应用 这个地方我修改了端口</strong></p>
<figure data-type="image" tabindex="3"><img src="https://i.yaoyao.site/blog/nas-apply-webdav.png" alt="应用 WebDAV|1076" loading="lazy"></figure>
<h3 id="创建共享目录">创建共享目录</h3>
<p>控制面板--&gt; 共享文件夹--&gt; 新增--&gt; obsidian</p>
<p>如图所示：<br>
<img src="https://i.yaoyao.site/blog/nas-share-create-obs.png" alt="创建共享目录|1067" loading="lazy"></p>
<h2 id="在-obsidian-上安装-remotely-save">在 Obsidian 上安装 Remotely Save</h2>
<ol>
<li>打开 Obsidian</li>
<li>在社区插件市场里搜索 Remotely Save 并安装</li>
</ol>
<p>如图所示：</p>
<figure data-type="image" tabindex="4"><img src="https://i.yaoyao.site/blog/obs-plugin-remotely-install.png" alt="安装|1200" loading="lazy"></figure>
<h2 id="在-obsidian-上配置-remotely-save">在 Obsidian 上配置 Remotely Save</h2>
<p>如图所示：</p>
<figure data-type="image" tabindex="5"><img src="https://i.yaoyao.site/blog/obs-plugin-remotely-set.png" alt="配置|1200" loading="lazy"></figure>
<h3 id="配置如下">配置如下：</h3>
<p>选择远程服务：webdav</p>
<p>服务器地址：<code>http://{你的地址}:{你的端口}/{你共享的文件夹}</code></p>
<p>用户名：<code>{你的用户名}</code></p>
<p>密码：<code>{你的密码}</code></p>
<h2 id="最后">最后</h2>
<p>等一段时间在 DSM 中就能看到已经被同步过来的数据。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Time Machine 将 Mac 数据备份到群晖 NAS]]></title>
        <id>https://yaoyao.blog/post/nas-sync-timemachine/</id>
        <link href="https://yaoyao.blog/post/nas-sync-timemachine/">
        </link>
        <updated>2022-11-30T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用-time-machine-将-mac-数据备份到群晖-nas">使用 Time Machine 将 Mac 数据备份到群晖 NAS</h1>
<p>::: tip  我的环境<br>
群晖 NAS 产品型号：DS1522+</p>
<p>群晖 NAS DSM 版本：DSM 7.1.1-42962 Update 2</p>
<p>Mac 型号：MacBook Pro 14-inch, 2021</p>
<p>Mac 系统：Ventura<br>
:::</p>
<h2 id="在群晖-nas-上进行配置">在群晖 NAS 上进行配置</h2>
<h3 id="创建名称为-time-machine-共享文件夹可以自定义">创建名称为 <strong>Time Machine</strong> 共享文件夹(可以自定义)</h3>
<ol>
<li>使用 <strong>管理员</strong> 帐户登录 DSM</li>
<li>打开 控制面板-&gt; 共享文件夹</li>
<li>点击新增</li>
<li>输入名称 例如 <strong>Time Machine</strong> 根据你的具体情况选择所在位置 (注：不要选择启动回收站和加密选项)</li>
</ol>
<p>如图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://i.yaoyao.site/blog/nas-share-create-timemachine.png" alt="创建共享文件夹|1104" loading="lazy"></figure>
<ol start="5">
<li>然后选择下一步</li>
<li>最后一步的时候 需要为你的用户设置可读写权限 然后点击<strong>应用</strong>即可</li>
</ol>
<p>如图所示：</p>
<figure data-type="image" tabindex="2"><img src="https://i.yaoyao.site/blog/nas-share-timemachine-perm.png" alt="配置用户权限" loading="lazy"></figure>
<h3 id="将共享文件夹设置为-time-machine-的备份目标">将共享文件夹设置为 Time Machine 的备份目标</h3>
<ol>
<li>使用 <strong>管理员</strong> 帐户登录 DSM</li>
<li>打开 控制面板-&gt; 文件服务</li>
</ol>
<h4 id="设置-smb-服务">设置 SMB 服务</h4>
<ol>
<li>打开 控制面板-&gt; 文件服务-&gt; SMB</li>
<li>启用 SMB 服务（勾选）</li>
<li>点击右下角<strong>应用</strong>即可</li>
</ol>
<p>如图所示：</p>
<figure data-type="image" tabindex="3"><img src="https://i.yaoyao.site/blog/nas-smb-start.png" alt="开启 SMB 服务" loading="lazy"></figure>
<h4 id="设置-afp-服务">设置 AFP 服务</h4>
<ol>
<li>打开 控制面板-&gt; 文件服务-&gt; AFP</li>
<li>启用 AFP 服务（勾选）</li>
<li>点击右下角<strong>应用</strong>即可</li>
</ol>
<p>如图所示：</p>
<figure data-type="image" tabindex="4"><img src="https://i.yaoyao.site/blog/nas-afp-start.png" alt="开启 AFP 服务" loading="lazy"></figure>
<h4 id="高级设置">高级设置</h4>
<ol>
<li>打开 控制面板-&gt; 文件服务-&gt; 高级设置</li>
<li>启用 Bonjour 服务发现以查找 Synology NAS</li>
<li>启用通过 SMB 进行 Bonjour Time Machine 推送 <strong>或</strong> 启用通过 AFP 进行  Bonjour Time Machine 推送</li>
<li>单击<strong>设置 Time Machine 文件夹</strong>  按钮 选择你刚刚创建好的共享文件夹 然后点击保存&amp;&amp;应用</li>
</ol>
<p>如图所示：</p>
<figure data-type="image" tabindex="5"><img src="https://i.yaoyao.site/blog/nas-bonjour-start.png" alt="配置 Bonjour" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://i.yaoyao.site/blog/nas-timemachine-set.png" alt="设置 TM 文件夹" loading="lazy"></figure>
<h2 id="在-mac-上进行配置">在 Mac 上进行配置</h2>
<h3 id="设置-time-machine">设置 Time Machine</h3>
<ol>
<li>在 Mac 上 打开 系统设置</li>
</ol>
<p>如图所示：<br>
<img src="https://i.yaoyao.site/blog/mac-system-settings.png" alt="打开系统应用|526" loading="lazy"></p>
<ol start="2">
<li>选择通用 -&gt;Time Machine</li>
</ol>
<p>如图所示：</p>
<figure data-type="image" tabindex="7"><img src="https://i.yaoyao.site/blog/mac-timemachine-main.png" alt="打开TM|1000" loading="lazy"></figure>
<ol start="3">
<li>选择备份的硬盘</li>
</ol>
<p>如图所示：</p>
<p><img src="https://i.yaoyao.site/blog/mac-timemachine-set.png" alt="" loading="lazy"><br>
4. 然后根据 Time Machine 规则 即可开始备份</p>
<h2 id="最后">最后</h2>
<p>建议使用 SMB 协议进行备份</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 kubeadm 在 ubuntu20.04 部署 kubernetes 集群]]></title>
        <id>https://yaoyao.blog/post/kubeadm-install-k8s/</id>
        <link href="https://yaoyao.blog/post/kubeadm-install-k8s/">
        </link>
        <updated>2022-05-25T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用-kubeadm-在-ubuntu2004-部署-kubernetes-集群">使用 kubeadm 在 ubuntu20.04 部署 kubernetes 集群</h1>
<h2 id="我的环境">我的环境</h2>
<p>4 台主机如下:</p>
<pre><code class="language-bash">cat /etc/hosts |grep home
10.211.55.9  home-01 # master
10.211.55.5  home-02 # node
10.211.55.11 home-03 # node
10.211.55.12 home-04 # node
</code></pre>
<p>操作系统版本:</p>
<pre><code class="language-bash"># uname -a
Linux home-01 5.13.0-25-generic #26~20.04.1-Ubuntu SMP Sat Jan 8 18:05:46 UTC 2022 aarch64 aarch64 aarch64 GNU/Linux
# cat /etc/os-release
NAME=&quot;Ubuntu&quot;
VERSION=&quot;20.04.3 LTS (Focal Fossa)&quot;
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=&quot;Ubuntu 20.04.3 LTS&quot;
VERSION_ID=&quot;20.04&quot;
HOME_URL=&quot;https://www.ubuntu.com/&quot;
SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;
BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;
PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal
</code></pre>
<h2 id="基础操作">基础操作</h2>
<p><strong>注 (所有机器都需要执行)</strong></p>
<p><strong>修改主机名并把主机信息加到 /etc/hosts 文件中</strong></p>
<pre><code class="language-bash"># hostnamectl set-hostname {主机名}
</code></pre>
<p><strong>关闭 swap</strong></p>
<pre><code class="language-bash"># sudo swapoff -a
</code></pre>
<p><strong>加载内核模块</strong></p>
<pre><code class="language-bash"># modprobe br_netfilter
</code></pre>
<p><strong>修改内核参数 创建文件添加内容</strong></p>
<pre><code class="language-bash"># cat &lt;&lt; EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
user.max_user_namespaces=28633
EOF
</code></pre>
<p><strong>执行以下命令使配置生效:</strong></p>
<pre><code class="language-bash"># sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf
</code></pre>
<p><strong>修改 DNS 禁用 systemd-resolved.service</strong></p>
<p>此处手动管理 /etc/resolv.conf</p>
<pre><code class="language-bash">
</code></pre>
<pre><code class="language-bash"># systemctl disable --now systemd-resolved.service
# cat /etc/resolv.conf
nameserver 114.114.114.114
nameserver 8.8.8.8
</code></pre>
<p><strong>安装 kubernetes 这里使用阿里云提供的源</strong></p>
<pre><code class="language-bash"># apt-get update &amp;&amp; apt install vim curl -y
apt-get update &amp;&amp; apt-get install -y apt-transport-https
curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - 
cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list
deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y kubelet kubeadm kubectl
</code></pre>
<p><strong>安装容器运行时 Containerd 这里使用阿里云提供的源</strong></p>
<pre><code class="language-bash"># // 添加相关源 我在Macbook上使用PD搞的虚拟机 这地方需要改为对应架构的 arch=arm64
# **sudo add-apt-repository &quot;deb [arch=arm64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;
# // 卸载 docker
#** sudo apt-get remove docker-ce docker.io docker
# // 安装 containerd
# sudo apt install containerd.io
</code></pre>
<p><strong>生成 Containerd 所需要的配置文件</strong></p>
<pre><code class="language-bash"># mkdir -p /etc/containerd
# containerd config default &gt; /etc/containerd/config.toml
</code></pre>
<p><strong>使用 systemd 作为容器的 cgroup driver</strong></p>
<pre><code class="language-bash"># vim /etc/containerd/config.toml
# SystemdCgroup = true
[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]
  ...
  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]
    SystemdCgroup = true
</code></pre>
<p>配置 <strong>Containerd</strong> 开机启动，并启动 <strong>Containerd</strong></p>
<pre><code class="language-bash">systemctl enable containerd --now
</code></pre>
<h2 id="使用-kubelet-初始化集群">使用 kubelet 初始化集群</h2>
<h3 id="在-master-上执行">在 master 上执行</h3>
<pre><code class="language-bash">sudo kubeadm init --pod-network-cidr 172.16.0.0/16  \
--apiserver-advertise-address=10.211.55.9 \
--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \
--cri-socket /run/containerd/containerd.sock
</code></pre>
<pre><code class="language-bash">mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
</code></pre>
<p>初始化成功后会生成节点加入集群的命令 在其他节点上执行该命令</p>
<p><strong><strong>在 node 上执行</strong></strong></p>
<pre><code class="language-bash">kubeadm join 10.211.55.9:6443 --token mldghy.xtf4a0u9bw8ltsvu --discovery-token-ca-cert-hash sha256:2b0f87c543d77e0b8f843db47c95985febe17a19de747b064720097db9b9535c
</code></pre>
<h2 id="部署-flannel-组件-vxlan-模式"><strong>部署 Flannel 组件 (Vxlan 模式)</strong></h2>
<p>在 master 上执行</p>
<p>下载配置文件</p>
<pre><code class="language-bash"># wget https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
</code></pre>
<p>修改配置文件 只修改 Network 和 Backend Type</p>
<pre><code class="language-bash">data:
  cni-conf.json: |
    {
      &quot;name&quot;: &quot;cbr0&quot;,
      &quot;cniVersion&quot;: &quot;0.3.1&quot;,
      &quot;plugins&quot;: [
        {
          &quot;type&quot;: &quot;flannel&quot;,
          &quot;delegate&quot;: {
            &quot;hairpinMode&quot;: true,
            &quot;isDefaultGateway&quot;: true
          }
        },
        {
          &quot;type&quot;: &quot;portmap&quot;,
          &quot;capabilities&quot;: {
            &quot;portMappings&quot;: true
          }
        }
      ]
    }
  net-conf.json: |
    {
      &quot;Network&quot;: &quot;172.16.0.0/16&quot;,
      &quot;Backend&quot;: {
        &quot;Type&quot;: &quot;vxlan&quot;
      }
    }
---
</code></pre>
<p>执行</p>
<pre><code class="language-bash"># kubectl apply -f kube-flannel.yaml
</code></pre>
<h2 id="查看集群状态">查看集群状态</h2>
<pre><code class="language-bash"># kubectl get nodes -o wide
NAME      STATUS   ROLES           AGE    VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
home-01   Ready    control-plane   15d    v1.24.0   10.211.55.9    &lt;none&gt;        Ubuntu 20.04.3 LTS   5.13.0-25-generic   containerd://1.6.4
home-02   Ready    &lt;none&gt;          15d    v1.24.0   10.211.55.5    &lt;none&gt;        Ubuntu 20.04.3 LTS   5.13.0-25-generic   containerd://1.6.4
home-03   Ready    &lt;none&gt;          15d    v1.24.0   10.211.55.11   &lt;none&gt;        Ubuntu 20.04.3 LTS   5.13.0-25-generic   containerd://1.6.4
home-04   Ready    &lt;none&gt;          5d6h   v1.24.0   10.211.55.12   &lt;none&gt;        Ubuntu 20.04.3 LTS   5.13.0-25-generic   containerd://1.6.4
</code></pre>
<h2 id="注">注:</h2>
<p>可以在每台机器上让 kubelet 开机启动</p>
<pre><code class="language-bash">systemctl enable kubelet.service
</code></pre>
<p>涉及 DNS 问题可以考虑关掉 DNS 管理服务</p>
<p>参考 <a href="https://icloudnative.io/posts/resolvconf-tutorial/">https://icloudnative.io/posts/resolvconf-tutorial/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MIT 6.S081/Fall 2020 搭建 risc-v 与 xv6 开发调试环境]]></title>
        <id>https://yaoyao.blog/post/mit6.S081-basic-env-install/</id>
        <link href="https://yaoyao.blog/post/mit6.S081-basic-env-install/">
        </link>
        <updated>2021-11-07T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mit-6s081fall-2020-搭建-risc-v-与-xv6-开发调试环境">MIT 6.S081/Fall 2020 搭建 risc-v 与 xv6 开发调试环境</h1>
<h2 id="背景">背景</h2>
<p>2022-01-19日更新</p>
<ol>
<li>很多人用 M1 架构编译都出现了错误 然后我同样复现了错误并且找到了解决办法</li>
<li>更详细的描述了不同的安装过程</li>
</ol>
<p>课程链接：<a href="https://pdos.csail.mit.edu/6.S081/2020/">https://pdos.csail.mit.edu/6.S081/2020/</a></p>
<h2 id="我的环境">我的环境：</h2>
<p>电脑型号：MacBook Pro (14-inch, 2021)</p>
<p>系统版本：macOS Monterey 12.1</p>
<p>我的笔记本是 arm64(M1芯片) 架构的，但此篇文章适用于 M1 及 Intel。</p>
<h2 id="前提必须安装">前提(必须安装)：</h2>
<p>默认情况下需要安装 brew 后面很多地方都需要用到此工具</p>
<pre><code class="language-bash"># 安装Brew 如果已经安装了可以下一步
/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
# 检查是否安装成功
brew -v
# 打印以下内容代表成功
Homebrew 3.3.11-21-gec389a6
Homebrew/homebrew-core (git revision 68defcb5dd3; last commit 2022-01-18)
Homebrew/homebrew-cask (git revision c6cfd6f92b; last commit 2022-01-18)
# 安装基本依赖环境
brew install python3 gawk gnu-sed gmp mpfr libmpc isl zlib expat gsed
brew tap discoteq/discoteq
brew install flock
# Qemu 需要依赖ninja
brew install ninja
</code></pre>
<h3 id="关于-gcc-llvm-clang可选">关于 GCC / LLVM + CLANG（可选）</h3>
<p>Mac 默认情况下预装的环境是 LLVM+CLANG 而不是 GCC 虽然有 GCC 的命令 但是其实是 CLANG</p>
<p>测试如下 执行 gcc -v:</p>
<pre><code class="language-bash">gcc -v
Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1
Apple clang version 13.0.0 (clang-1300.0.29.30)
Target: arm64-apple-darwin21.2.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
</code></pre>
<p>在编译 <a href="https://github.com/riscv-collab/riscv-gnu-toolchain">riscv-gnu-toolchain</a>  工具链的时候，本机是 GCC 还是 LLVM+CLANG 都不会影响，我亲测都可以编译成功，所以这个地方可以保持默认，如果需要安装GCC 来替换 LLVM + CLANG 可以按照以下步骤操作:</p>
<pre><code class="language-bash"># 安装
brew install gcc
# 版本为gcc 11.2.0_3
# 设置环境变量: 
# 把以下内容添加到 ~/.zshrc 或者 ~/.bash_profile  或者 /etc/profile
# 因为我使用的是zsh 所以配置到 ~/.zshrc 里
vim ~/.zshrc
# 增加以下内容 
export GCCPATH=/opt/homebrew/Cellar/gcc/11.2.0_3/
export PATH=$PATH:${GCCPATH//://bin:}/bin
alias gcc='gcc-11'
alias cc='gcc-11'
alias g++='g++-11'
alias c++='c++-11'
# 使环境生效
source ~/.zshrc
# 测试
gcc -v
Using built-in specs.
COLLECT_GCC=gcc-11
COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc/11.2.0_3/bin/../libexec/gcc/aarch64-apple-darwin21/11/lto-wrapper
Target: aarch64-apple-darwin21
....省略
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 11.2.0 (Homebrew GCC 11.2.0_3)
</code></pre>
<h2 id="安装-riscv-gnu-toolchain">安装 riscv-gnu-toolchain</h2>
<p><strong>以下安装选一个即可 你怎么开心怎么选 我用的是 <code>2.源码编译安装</code></strong></p>
<h3 id="1-使用-brew-进行安装可选">1. 使用 brew 进行安装（可选）</h3>
<p>我用了这个步骤安装 会出现一些问题 所以此处需要看运气了。</p>
<pre><code class="language-bash">brew tap riscv-software-src/riscv
brew install riscv-tools
</code></pre>
<h3 id="2-源码编译安装可选">2. 源码编译安装（可选）</h3>
<p><strong>克隆源码</strong></p>
<pre><code class="language-bash">git clone --recursive https://github.com/riscv/riscv-gnu-toolchain
</code></pre>
<p>我安装的版本</p>
<p>riscv-gnu-toolchain commit: <strong>f640044a947afb39c78b96fa1ba1db8aa31b1d89</strong> tag: <strong>2022.01.17</strong></p>
<p>qemu commit: <strong>553032db17440f8de011390e5a1cfddd13751b0b</strong> tag: <strong>v5.2.0</strong></p>
<p>riscv-binutils commit: <strong>116a737f438d03a1bd6aa706b6ea0b4022f3b7e2(riscv-binutils-2.37)</strong></p>
<p>riscv-dejagnu commit: <strong>4ea498a8e1fafeb568530d84db1880066478c86b(riscv-dejagnu-1.6)</strong></p>
<p>riscv-gcc commit: <strong>ca312387ab141060c20c388d83d6fc4b2099af1d(riscv-gcc-10.2.0)</strong></p>
<p>riscv-gdb commit: <strong>5da071ef0965b8054310d8dde9975037b0467311(fsf-gdb-10.1-with-sim)</strong></p>
<p>riscv-glibc commit: <strong>9826b03b747b841f5fc6de2054bf1ef3f5c4bdf3</strong> tag: <strong>glibc-2.33</strong></p>
<p>riscv-newlib commit: <strong>415fdd4279b85eeec9d54775ce13c5c412451e08</strong> tag: <strong>newlib-4.1.0</strong></p>
<p>源码很大 6.5G左右 所以克隆的时候会很慢 可以先克隆主仓库 分开克隆子仓库</p>
<pre><code class="language-bash">git clone https://github.com/riscv/riscv-gnu-toolchain
cd riscv-gnu-toolchain
git submodule update --init --recursive
</code></pre>
<p>百度云中下载我这边上传好的 可以直接下载解压</p>
<p>地址：<a href="https://pan.baidu.com/s/1iDNpV2_UTWk4OwZx0Bv2YA">源码包</a>   提取码：<code>nmvw</code>  包名： <code>riscv-gnu-toolchain-src-2022-01-17.tar.gz</code></p>
<p><strong>编译安装</strong></p>
<p><strong>(重要)注: 如果你的 Mac 是 arm 架构 M1 系列的芯片 需要改个配置</strong></p>
<p>修改如下:</p>
<pre><code class="language-bash"># 进入目录
cd riscv-gnu-toolchain
# 注销配置
# 编辑文件 
vim riscv-gcc/gcc/config.host
# 注销96行 97行
96     #out_host_hook_obj=host-darwin.o
97     #host_xmake_file=&quot;${host_xmake_file} x-darwin&quot;
</code></pre>
<p>编译 耗时较长 慢慢等待吧 目测要1小时左右</p>
<pre><code class="language-bash">cd riscv-gnu-toolchain
./configure --prefix=/opt/riscv-gnu-toolchain --with-cmodel=medany --enable-multilib
# 因为安到opt目录下所以加了sudo 如果不安装在这个目录下 可以不使用sudo
sudo make
</code></pre>
<p>如果安装成功 则显示如下:</p>
<figure data-type="image" tabindex="1"><img src="https://i.yaoyao.site/blog/mit-make-gdb-install.png" alt="mit-make-gdb-install" loading="lazy"></figure>
<p><strong>配置环境变量</strong></p>
<pre><code class="language-bash"># 把以下内容添加到 ~/.zshrc 或者 ~/.bash_profile  或者 /etc/profile
# 因为我使用的是zsh 所以配置到 ~/.zshrc 里
export RISCV_HOME=/opt/riscv-gnu-toolchain
export PATH=${PATH}:${RISCV_HOME}/bin
# 用 source 命令 让环境变量重新加载
source ~/.zshrc 
</code></pre>
<h3 id="3-直接使用预编译版本可选">3. <strong>直接使用预编译版本</strong>（可选）</h3>
<p><strong>下载</strong>:</p>
<p><strong><code>x86_64(intel)</code></strong></p>
<p>地址：<a href="https://pan.baidu.com/s/1iDNpV2_UTWk4OwZx0Bv2YA">源码包</a>   提取码：<code>nmvw</code>  包名： <code>riscv-gnu-toolchain-bin-2020.04.01-x86_64-apple-darwin.tar.gz</code></p>
<p><strong><code>aarm(m1)</code></strong></p>
<p>地址：<a href="https://pan.baidu.com/s/1iDNpV2_UTWk4OwZx0Bv2YA">源码包</a>   提取码：<code>nmvw</code>  包名： <code>riscv-gnu-toolchain-bin-2022.01.18-arm64-apple-darwin.tar.gz</code></p>
<p><strong>解压</strong></p>
<pre><code class="language-bash">
tar xf {上面你下载的包名} -C /opt/
ls /opt/riscv-gnu-toolchain
drwxr-xr-x  33 root  wheel  1056 Jan 19 09:39 bin
drwxr-xr-x   3 root  wheel    96 Jan 19 09:39 include
drwxr-xr-x   8 root  wheel   256 Jan 19 09:39 lib
drwxr-xr-x   3 root  wheel    96 Jan 18 23:54 libexec
drwxr-xr-x   5 root  wheel   160 Jan 18 23:59 riscv64-unknown-elf
drwxr-xr-x   7 root  wheel   224 Jan 19 09:39 share
</code></pre>
<p><strong>配置环境变量</strong></p>
<pre><code class="language-bash"># 把以下内容添加到 ~/.zshrc 或者 ~/.bash_profile  或者 /etc/profile
# 因为我使用的是zsh 所以配置到 ~/.zshrc 里
export RISCV_HOME=/opt/riscv-gnu-toolchain
export PATH=${PATH}:${RISCV_HOME}/bin
# 用 source 命令 让环境变量重新加载
source ~/.zshrc 
</code></pre>
<h3 id="4-验证是否安装成功">4. <strong>验证是否安装成功</strong></h3>
<pre><code class="language-bash">//执行
riscv64-unknown-elf-gcc -v
// 如打印以下内容代表安装成功
riscv64-unknown-elf-gcc -v
Using built-in specs.
COLLECT_GCC=riscv64-unknown-elf-gcc
COLLECT_LTO_WRAPPER=/opt/riscv-gnu-toolchain/libexec/gcc/riscv64-unknown-elf/11.1.0/lto-wrapper
Target: riscv64-unknown-elf
Thread model: single
Supported LTO compression algorithms: zlib
gcc version 11.1.0 (GCC)

</code></pre>
<h2 id="安装-qemu">安装 Qemu</h2>
<p>qemu 是强大的虚拟机操作系统模拟器，在此课程中，我们使用 qemu 来模拟硬件 ，使 xv6 运行在该模拟器之上。</p>
<p>我安装的 qemu 版本为 <code>6.2.0</code></p>
<p>**以下安装选一个即可 你怎么开心怎么选 我用的是 <code>1.使用 brew 安装</code></p>
<h3 id="1-使用-brew-安装可选">1. 使用 brew 安装（可选）</h3>
<pre><code class="language-bash">// 本人就使用了这种方式进行安装
brew install qemu
</code></pre>
<h3 id="2-使用源码安装可选">2. 使用源码安装（可选）</h3>
<p><strong>下载源码并编译安装</strong></p>
<pre><code class="language-bash">wget https://download.qemu.org/qemu-6.2.0.tar.xz
tar xf qemu-6.2.0.tar.xz
cd qemu-6.2.0
./configure --prefix=/opt/qemu
make 
make install
</code></pre>
<p><strong>配置环境变量</strong></p>
<pre><code class="language-bash"># 把以下内容添加到 ~/.zshrc 或者 ~/.bash_profile  或者 /etc/profile
# 因为我使用的是zsh 所以配置到 ~/.zshrc 里
export QEMU_HOME=/opt/qemu
export PATH=${PATH}:${QEMU_HOME}/bin
# 用 source 命令 让环境变量重新加载
source ~/.zshrc 
</code></pre>
<h3 id="3-验证是否安装成功">3. 验证是否安装成功</h3>
<pre><code class="language-bash">// 执行 如果打印以下内容代表安装成功
qemu-system-riscv64 --version
QEMU emulator version 6.1.0
Copyright (c) 2003-2021 Fabrice Bellard and the QEMU Project developers
</code></pre>
<h2 id="编译及运行-xv6">编译及运行 xv6</h2>
<p><strong>克隆</strong></p>
<pre><code class="language-bash">git clone https://github.com/mit-pdos/xv6-riscv.git
</code></pre>
<p><strong>编译</strong></p>
<pre><code class="language-bash">cd xv6-riscv
make

</code></pre>
<p><strong>使用 qemu 运行</strong></p>
<pre><code class="language-bash">make qemu
</code></pre>
<p>显示如下代表运行成功</p>
<figure data-type="image" tabindex="2"><img src="https://i.yaoyao.site/blog/mit-make-qemu.png" alt="mit-make-qemu" loading="lazy"></figure>
<h2 id="使用-qemu-gdb-对-xv6进行调试">使用 qemu-gdb 对 xv6进行调试</h2>
<p>需要2个窗口(终端)</p>
<h3 id="窗口1">窗口1</h3>
<pre><code class="language-bash">cd xv6-riscv
make CPUS=1 qemu-gdb
</code></pre>
<p>显示如下 这样代表启动成功 qemu-gdb</p>
<figure data-type="image" tabindex="3"><img src="https://i.yaoyao.site/blog/mit-make-qemu-gdb.png" alt="mit-make-qemu-gdb" loading="lazy"></figure>
<h3 id="窗口2">窗口2</h3>
<pre><code class="language-bash">cd xv6-riscv
riscv64-unknown-elf-gdb
</code></pre>
<p>显示如下 这样代表成功</p>
<figure data-type="image" tabindex="4"><img src="https://i.yaoyao.site/blog/mit-riscv-gdb.png" alt="mit-riscv-gdb" loading="lazy"></figure>
<p>注: <code>xv6-riscv</code> 目录下有 <code>.gdbinit</code> 配置 有的情况下 <code>riscv64-unknown-elf-gdb</code> 会自动加载 如果没有自动加载则需要你手动 <code>source .gdbinit</code> 当打印 <code>0x0000000000001000 in ?? ()</code> 代表可以调试。</p>
<h2 id="faq"><strong>FAQ</strong>:</h2>
<ol>
<li>
<p>ld: symbol(s) not found for architecture arm64</p>
<p>如果出现此问题 一般都是 arm架构 导致的</p>
<p><strong>官方 issues 反馈的问题：<a href="https://github.com/riscv-software-src/homebrew-riscv/issues/47">https://github.com/riscv-software-src/homebrew-riscv/issues/47</a></strong></p>
<p>解决办法:</p>
<pre><code class="language-bash"># 进入目录
cd riscv-gnu-toolchain
# 注销配置
# 编辑文件 
vim riscv-gcc/gcc/config.host
# 注销96行 97行
96     #out_host_hook_obj=host-darwin.o
97     #host_xmake_file=&quot;${host_xmake_file} x-darwin&quot;
</code></pre>
</li>
<li>
<p>如果出现此问题 是gdb没有正常加载</p>
<pre><code class="language-bash">Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type &quot;show copying&quot; and &quot;show warranty&quot; for details.
This GDB was configured as &quot;--host=arm-apple-darwin21.2.0 --target=riscv64-unknown-elf&quot;.
Type &quot;show configuration&quot; for configuration details.
For bug reporting instructions, please see:
&lt;https://www.gnu.org/software/gdb/bugs/&gt;.
Find the GDB manual and other documentation resources online at:
    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.

For help, type &quot;help&quot;.
Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.
warning: File &quot;/.../xv6-riscv/.gdbinit&quot; auto-loading has been declined by your `auto-load safe-path' set to &quot;$debugdir:$datadir/auto-load&quot;.
To enable execution of this file add
	add-auto-load-safe-path /.../Documents/code/os/xv6-riscv/.gdbinit
line to your configuration file &quot;/Users/.../.gdbinit&quot;.
To completely disable this security protection add
	set auto-load safe-path /
line to your configuration file &quot;/Users/.../.gdbinit&quot;.
For more information about this security protection see the
&quot;Auto-loading safe path&quot; section in the GDB manual.  E.g., run from the shell:
	info &quot;(gdb)Auto-loading safe path&quot;
(gdb)
</code></pre>
<p>解决办法:</p>
<p><code>xv6-riscv</code> 目录下有 <code>.gdbinit</code> 配置 有的情况下 <code>riscv64-unknown-elf-gdb</code> 会自动加载 如果没有自动加载则需要你手动 <code>source .gdbinit</code> 当打印 <code>0x0000000000001000 in ?? ()</code> 代表可以调试。</p>
</li>
</ol>
<h2 id="参考资料">参考资料:</h2>
<ol>
<li><a href="https://rcore-os.github.io/rCore-Tutorial-Book-v3/chapter0/5setup-devel-env.html#qemu">https://rcore-os.github.io/rCore-Tutorial-Book-v3/chapter0/5setup-devel-env.html#qemu</a></li>
<li>https://github.com/riscv-software-src/homebrew-riscv</li>
<li>https://github.com/riscv-software-src/homebrew-riscv/issues/47</li>
<li>https://github.com/riscv-collab/riscv-gnu-toolchain</li>
<li><a href="https://zhayujie.com/mit6828-env.html">https://zhayujie.com/mit6828-env.html</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL 双主基于 GTID 复制方案]]></title>
        <id>https://yaoyao.blog/post/mysql-2master-gtid/</id>
        <link href="https://yaoyao.blog/post/mysql-2master-gtid/">
        </link>
        <updated>2021-09-06T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql-双主基于gtid-复制方案">MySQL 双主基于GTID 复制方案</h1>
<h2 id="我的环境">我的环境</h2>
<p>操作系统：CentOS Linux release 7.8.2003 (Core)</p>
<p>master-1：192.168.200.50</p>
<p>master-2：192.168.200.51</p>
<h2 id="基本操作">基本操作</h2>
<p><strong>注: 所有节点都需要执行</strong></p>
<pre><code class="language-bash">// 关闭防火墙
systemctl stop firewalld
// 关闭Selinux
vim /etc/sysconfig/selinux
SELINUX=disabled 
// 临时关闭Selinux
setenforce 0
</code></pre>
<h2 id="二进制安装数据库">二进制安装数据库</h2>
<p><strong>注: 所有节点都需要执行</strong></p>
<h3 id="安装数据库">安装数据库</h3>
<pre><code class="language-bash">// 安装数据库
mkdir /usr/local/mysql
// 解压缩
tar -zxvf mysql-5.7.35-linux-glibc2.12-x86_64.tar.gz -C /usr/local/mysql --strip=1
// 创建用户及用户组
groupadd mysql
useradd mysql -g mysql -s /sbin/nologin
// 创建数据库数据目录
mkdir /usr/local/mysql/data
// 授权
chown -R mysql.mysql /usr/local/mysql
// 复制启动脚本
cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld
// 设置开机启动
chkconfig on mysqld
</code></pre>
<h3 id="初始化数据库">初始化数据库</h3>
<pre><code class="language-bash">// 初始化数据库 此处会生成默认root密码
/usr/local/mysql/bin/mysqld --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data --initialize
// 会打印一下日志 记住保存好密码
2021-09-01T11:54:32.248336Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2021-09-01T11:54:33.099720Z 0 [Warning] InnoDB: New log files created, LSN=45790
2021-09-01T11:54:33.236031Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.
2021-09-01T11:54:33.310273Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 5f55799d-0b1b-11ec-9475-005056a53fc6.
2021-09-01T11:54:33.313554Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.
2021-09-01T11:54:34.641583Z 0 [Warning] A deprecated TLS version TLSv1 is enabled. Please use TLSv1.2 or higher.
2021-09-01T11:54:34.641629Z 0 [Warning] A deprecated TLS version TLSv1.1 is enabled. Please use TLSv1.2 or higher.
2021-09-01T11:54:34.642431Z 0 [Warning] CA certificate ca.pem is self signed.
2021-09-01T11:54:34.944690Z 1 [Note] A temporary password is generated for root@localhost: **urG/hV3t0jo?**
</code></pre>
<h2 id="双主配置">双主配置</h2>
<h3 id="节点-1-配置数据库"><strong>节点 1 配置数据库</strong></h3>
<pre><code class="language-bash">// 打开/etc/my.cnf 将以下内容添加进去
vim /etc/my.cnf

[mysqld]
# 数据目录
datadir=/usr/local/mysql/data
basedir=/usr/local/mysql/
socket=/usr/local/mysql/data/mysql.sock
user=mysql
# 端口
port=13306
character-set-server=utf8
default_storage_engine = InnoDB
lower_case_table_names = 1
# 服务ID 唯一 不同节点分配不同ID
server_id = 1
# 打开Mysql日志 格式为二进制
log-bin = mysql-bin
# 开启基于GTID的复制
gtid_mode = on
enforce_gtid_consistency = on
binlog_format = row
log-slave-updates = 1
skip_slave_start = 1
# 与节点数相同
auto-increment-increment = 2
# 自增
auto-increment-offset = 1
symbolic-links=0
[client]
port = 13306
default-character-set=utf8
socket=/usr/local/mysql/data/mysql.sock
[mysqld_safe]
log-error=/usr/local/mysql/data/error.log
pid-file=/usr/local/mysql/data/database.pid
</code></pre>
<p><strong>节点 1 启动数据库</strong></p>
<pre><code class="language-bash">// 启动数据库
/etc/init.d/mysqld start
</code></pre>
<p><strong>节点 1 初始化密码</strong></p>
<pre><code class="language-bash">// 登陆数据库
/usr/local/mysql/bin/mysql -uroot -p --port=13306
// 修改root密码
mysql&gt;ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';
mysql&gt;flush privileges;
mysql&gt;exit;
</code></pre>
<p><strong>节点 1 创建从库同步用户</strong></p>
<pre><code class="language-bash">// 登陆数据库
/usr/local/mysql/bin/mysql -uroot -p --port=13306
// 创建同步用户
mysql&gt;GRANT REPLICATION SLAVE ON *.* TO master1@'%' IDENTIFIED BY '123456';
mysql&gt;flush privileges;
mysql&gt;exit;
</code></pre>
<h3 id="节点-2-配置数据库"><strong>节点 2 配置数据库</strong></h3>
<pre><code class="language-bash">// 打开/etc/my.cnf 将以下内容添加进去
vim /etc/my.cnf

[mysqld]
# 数据目录
datadir=/usr/local/mysql/data
basedir=/usr/local/mysql/
socket=/usr/local/mysql/data/mysql.sock
user=mysql
# 端口
port=13306
character-set-server=utf8
default_storage_engine = InnoDB
lower_case_table_names = 1
# 服务ID 唯一 不同节点分配不同ID
server_id = 2
# 打开Mysql日志 格式为二进制
log-bin = mysql-bin
# 开启基于GTID的复制
gtid_mode = on
enforce_gtid_consistency = on
binlog_format = row
log-slave-updates = 1
skip_slave_start = 1
# 与节点数相同
auto-increment-increment = 2
# 自增
auto-increment-offset = 2
symbolic-links=0
[client]
port = 13306
default-character-set=utf8
socket=/usr/local/mysql/data/mysql.sock
[mysqld_safe]
log-error=/usr/local/mysql/data/error.log
pid-file=/usr/local/mysql/data/database.pid
</code></pre>
<p><strong>节点 2 启动数据库</strong></p>
<pre><code class="language-bash">// 启动数据库
/etc/init.d/mysqld start
</code></pre>
<p><strong>节点 2 初始化密码</strong></p>
<pre><code class="language-bash">// 登陆数据库
/usr/local/mysql/bin/mysql -uroot -p --port=13306
// 修改root密码
mysql&gt;ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';
mysql&gt;flush privileges;
mysql&gt;exit;
</code></pre>
<p><strong>节点 2 创建从库同步用户</strong></p>
<pre><code class="language-bash">// 登陆数据库
/usr/local/mysql/bin/mysql -uroot -p --port=13306
// 创建同步用户
mysql&gt;GRANT REPLICATION SLAVE ON *.* TO master2@'%' IDENTIFIED BY '123456';
mysql&gt;flush privileges;
mysql&gt;exit;
</code></pre>
<h2 id="双主同步配置">双主同步配置</h2>
<p><strong>节点 2 开启同步节点 1</strong></p>
<pre><code class="language-bash">// 登陆数据库
/usr/local/mysql/bin/mysql -uroot -p --port=13306
// 创建同步
mysql&gt;change master to master_host='192.168.200.50',master_user='master1',master_password='123456',master_port=13306,master_auto_position=1;
// 开始同步
mysql&gt;start slave;
// 查看同步状态
mysql&gt;show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.200.50
                  Master_User: master1
                  Master_Port: 13306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000003
          Read_Master_Log_Pos: 194
               Relay_Log_File: work-02-relay-bin.000003
                Relay_Log_Pos: 367
        Relay_Master_Log_File: mysql-bin.000003
             Slave_IO_Running: Yes // 必须为Yes 表示当前线程会连接Master节点的Bin-Log 并同步到本地中继日志中
            Slave_SQL_Running: Yes // 必须为Yes 表示从本地中继日志中读取数据 恢复到对应位置
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 194
              Relay_Log_Space: 670
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Master_Server_Id: 1
                  Master_UUID: 9e07b87e-0b1e-11ec-8609-005056a53fc6
             Master_Info_File: /usr/local/mysql/data/master.info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
                  Master_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Master_SSL_Crl:
           Master_SSL_Crlpath:
           Retrieved_Gtid_Set:
            Executed_Gtid_Set:
                Auto_Position: 1
         Replicate_Rewrite_DB:
                 Channel_Name:
           Master_TLS_Version:
1 row in set (0.00 sec)
</code></pre>
<p><strong>节点 1 开启同步节点 2</strong></p>
<pre><code class="language-bash">// 登陆数据库
/usr/local/mysql/bin/mysql -uroot -p --port=13306
// 创建同步
mysql&gt;change master to master_host='192.168.200.51',master_user='master2',master_password='123456',master_port=13306,master_auto_position=1;
// 开始同步
mysql&gt;start slave;
// 查看同步状态
mysql&gt;show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.200.51
                  Master_User: master2
                  Master_Port: 13306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000001
          Read_Master_Log_Pos: 759
               Relay_Log_File: work-01-relay-bin.000002
                Relay_Log_Pos: 862
        Relay_Master_Log_File: mysql-bin.000001
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 759
              Relay_Log_Space: 1071
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Master_Server_Id: 2
                  Master_UUID: e9ff5da2-0b1e-11ec-b665-005056a5c44c
             Master_Info_File: /usr/local/mysql/data/master.info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
                  Master_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Master_SSL_Crl:
           Master_SSL_Crlpath:
           Retrieved_Gtid_Set: e9ff5da2-0b1e-11ec-b665-005056a5c44c:1-2
            Executed_Gtid_Set: 9e07b87e-0b1e-11ec-8609-005056a53fc6:1-5,
e9ff5da2-0b1e-11ec-b665-005056a5c44c:1-2
                Auto_Position: 1
         Replicate_Rewrite_DB:
                 Channel_Name:
           Master_TLS_Version:
1 row in set (0.00 sec)
</code></pre>
<p><strong>对 IP 进行授权访问</strong></p>
<pre><code class="language-bash">// 在任意一个节点上执行
// 登陆数据库
/usr/local/mysql/bin/mysql -uroot -p --port=13306
mysql&gt;grant all on *.* to 'root'@'192.168.200.50' identified by '123456' with grant option;
mysql&gt;grant all on *.* to 'root'@'192.168.200.51' identified by '123456' with grant option;
mysql&gt;flush privileges;
mysql&gt;exit;
</code></pre>
<h2 id="测试数据库">测试数据库</h2>
<p><strong>注：任意一台服务器/2 个节点其中一个 需要确保已经授权</strong></p>
<pre><code class="language-bash">// 登陆数据库 如果登陆成功 代表数据库集群正常运行
/usr/local/mysql/bin/mysql -uroot -p -h 192.168.200.50 --port=13306
</code></pre>
<p><strong>完整数据库测试</strong></p>
<pre><code class="language-bash">// 测试数据库创建
create database test1;
// 测试数据表创建
use test1;
create table user(
id int auto_increment primary key,
user varchar(20) not null,
sex varchar(20) not null,
birthday datetime
)
// 测试数据插入 不带ID 让Mysql自增
insert into user(user,sex,birthday) values('耀耀','男','1977-09-01');
// 查看数据
select * from user;
+----+--------+-----+---------------------+
| id | user   | sex | birthday            |
+----+--------+-----+---------------------+
|  2 | 张三 | 男 | 1977-09-01 00:00:00 |
|  4 | 张三 | 男 | 1977-09-01 00:00:00 |
|  6 | 张三 | 男 | 1977-09-01 00:00:00 |
+----+--------+-----+---------------------+
发现是2倍数递增
// 测试数据插入 携带ID
insert into user(id,user,sex,birthday) values(7,'耀耀','男','1977-09-01');
</code></pre>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://keithlan.github.io/2016/06/23/gtid/">https://keithlan.github.io/2016/06/23/gtid/</a></li>
<li><a href="http://mysql.taobao.org/monthly/2020/05/09/">http://mysql.taobao.org/monthly/2020/05/09/</a></li>
<li><a href="https://bbs.huaweicloud.com/blogs/211180">https://bbs.huaweicloud.com/blogs/211180</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 解决 OpenSSH 漏洞升级方案]]></title>
        <id>https://yaoyao.blog/post/centos7-update-ssh8.6/</id>
        <link href="https://yaoyao.blog/post/centos7-update-ssh8.6/">
        </link>
        <updated>2021-07-31T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="centos7-解决-openssh-漏洞升级方案">Centos7 解决 OpenSSH 漏洞升级方案</h1>
<h2 id="背景">背景</h2>
<ol>
<li>通过绿盟安全扫描 Centos7 操作系统，均检测到 OpenSSH 不同程度的中、高风险漏洞；</li>
<li>鉴于官网没有为 Centos7 提供更新 <code>openssh</code> 相关的 RPM 安装包；为提高 Centos7 操作系统的安全性，将 Centos7 中的 <code>OpenSSH</code> 统一编译升级到指定版本：<code>OpenSSH 8.6p1</code>，以此来修复 <code>OpenSSH</code> 安全漏洞</li>
<li>因涉及漏洞的生产环境不能上网，只有内网环境，所以需要在单独一台服务器上进行制作 <code>OpenSSH 8.6p1</code> RPM 安装包，再把此安装包放到生产服务器上进行安装。另外一个方案就是下载 <code>OpenSSH 8.6p1</code> 所需要的依赖包然后在生产环境进行操作，此方案比较麻烦 暂时不考虑使用。</li>
</ol>
<h2 id="我的环境">我的环境</h2>
<p>操作系统：CentOS Linux release 7.8.2003 (Core)</p>
<h2 id="开始">开始</h2>
<p><strong>下载</strong> openssh <strong>源码包</strong></p>
<pre><code class="language-bash">wget https://openbsd.hk/pub/OpenBSD/OpenSSH/portable/openssh-8.6p1.tar.gz
wget https://src.fedoraproject.org/repo/pkgs/openssh/x11-ssh-askpass-1.2.4.1.tar.gz/8f2e41f3f7eaa8543a2440454637f3c3/x11-ssh-askpass-1.2.4.1.tar.gz
</code></pre>
<p><strong>安装 RPM 编译工具及相关依赖包</strong></p>
<pre><code class="language-bash">yum install -y rpm-build zlib-devel openssl-devel gcc perl-devel pam-devel
</code></pre>
<p><strong>创建 RPM 编译环境</strong></p>
<pre><code class="language-bash">cd /root/
mkdir -p rpmbuild/{SOURCES,SPECS,RPMS,SRPMS,BUILD,BUILDROOT}
</code></pre>
<p><strong>将</strong> openssh <strong>依赖文件复制到对应环境中</strong></p>
<pre><code class="language-bash">// 源码包
cp /root/openssh-8.6p1.tar.gz /root/rpmbuild/SOURCES/
cp /root/x11-ssh-askpass-1.2.4.1.tar.gz /root/rpmbuild/SOURCES/
tar -zxf /root/openssh-8.6p1.tar.gz -C /opt/
// 依赖文件
cp /opt/openssh-8.6p1/contrib/redhat/openssh.spec /root/rpmbuild/SPECS/
// 授权
chown sshd:sshd /root/rpmbuild/SPECS/openssh.spec
</code></pre>
<p><strong>定制</strong> <code>/etc/pam.d/sshd</code>  <strong>文件</strong></p>
<p>因为如果使用 openssh 提供的 sshd 会有可能导致安装后登陆不上的问题，所以还继续使用当前的 sshd 文件。</p>
<pre><code class="language-bash">vim /root/rpmbuild/SOURCES/sshd

# 将以下内容保存到该文件中

#%PAM-1.0
auth       required     pam_sepermit.so
auth       substack     password-auth
auth       include      postlogin
# Used with polkit to reauthorize users in remote sessions
-auth      optional     pam_reauthorize.so prepare
account    required     pam_nologin.so
account    include      password-auth
password   include      password-auth
# pam_selinux.so close should be the first session rule
session    required     pam_selinux.so close
session    required     pam_loginuid.so
# pam_selinux.so open should only be followed by sessions to be executed in the user context
session    required     pam_selinux.so open env_params
session    required     pam_namespace.so
session    optional     pam_keyinit.so force revoke
session    include      password-auth
session    include      postlogin
# Used with polkit to reauthorize users in remote sessions
-session   optional     pam_reauthorize.so prepare
</code></pre>
<p><strong>修改</strong> <code>openssh.spec</code> <strong>配置</strong></p>
<pre><code class="language-bash">cd /root/rpmbuild/SPECS/

vim openssh.spec

# 找到如下这行 并注销该行 要不在检测的时候会报错
#BuildRequires: openssl-devel &lt; 1.1

# 找到如下这行 并将0改为1

# Do we want to disable building of x11-askpass? (1=yes 0=no)
%global no_x11_askpass 1

# 找到如下这行 并将0改为1

# Do we want to disable building of gnome-askpass? (1=yes 0=no)
%global no_gnome_askpass 1

# 找到如下这行 原配置：
install -m644 contrib/redhat/sshd.pam     $RPM_BUILD_ROOT/etc/pam.d/sshd
# 修改如下：原因是使用自已定制的 sshd 文件
install -m644 $RPM_SOURCE_DIR/sshd $RPM_BUILD_ROOT/etc/pam.d/sshd

# 注 以下操作都是修改配置文件 将命令放进去 并非执行这些命令 这些命令在安装ssh的时候 会根据spec文件进行执行

# 搜索 %pre server
# 在 %pre server 下新增配置 表示安装前执行的操作
# 配置如下：备份当前ssh文件
cp -r /etc/ssh /etc/ssh_bak

# 搜索 %post server
# 在 %post server 下新增配置，表示安装后需要执行的命令
    
# 允许root登录；升级为8.6后默认为不允许root登录
sed -i -e  &quot;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g&quot;    /etc/ssh/sshd_config
# 允许使用PAM登录认证
sed -i  -e  &quot;s/#UsePAM no/UsePAM yes/g&quot;  /etc/ssh/sshd_config
# 允许使用X11Forwarding图形模块
sed -i -e &quot;s/#X11Forwarding no/X11Forwarding yes/g&quot; /etc/ssh/sshd_config
# 增加认证支持（默认openssh 8.6，默认不支持部分低版本的认证模式），不添加会造成低版本的连接器如：CRT等，客户端连接失败
echo &quot;KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1&quot; &gt;&gt;/etc/ssh/sshd_config
# 给/etc/init.d/sshd 执行权限
chmod +x /etc/init.d/sshd
# 三个文件 ssh_host_rsa_key、ssh_host_ecdsa_key、ssh_host_ed25519_key 8.6版本缩小了权限，只允许root查看，否者启动sshd服务会报错
chmod 600 /etc/ssh/ssh_host_rsa_key
chmod 600 /etc/ssh/ssh_host_ecdsa_key
chmod 600 /etc/ssh/ssh_host_ed25519_key
</code></pre>
<p><strong>编译</strong></p>
<pre><code class="language-bash">cd /root/rpmbuild/SPECS/
rpmbuild -ba openssh.spec
</code></pre>
<p><strong>查看生成的 RPM 及进行打包</strong></p>
<pre><code class="language-bash">cd /root/rpmbuild/RPMS/x86_64/
ls /root/rpmbuild/RPMS/x86_64/
openssh-8.6p1-1.el7.x86_64.rpm          openssh-debuginfo-8.6p1-1.el7.x86_64.rpm
openssh-clients-8.6p1-1.el7.x86_64.rpm  openssh-server-8.6p1-1.el7.x86_64.rpm
// 打包
tar -zcvf openssh-8.6p1_rpm_package.tar.gz *.rpm
</code></pre>
<h2 id="验证">验证</h2>
<p><strong>验证 RPM ( scp 到其他服务器进行测试)</strong></p>
<pre><code class="language-bash">ls /root/openssh-8.6p1_rpm_package.tar.gz
tar xf openssh-8.6p1_rpm_package.tar.gz
</code></pre>
<p>（可选）<strong>保存现有 SSH 配置及相关命令</strong></p>
<pre><code class="language-bash"># 配置备份
mkdir /root/ssh_bak_`date +&quot;%Y-%m-%d&quot;`
cp -r /etc/ssh/* /root/ssh_bak_`date +&quot;%Y-%m-%d&quot;`
cp /etc/pam.d/sshd /root/ssh_bak_`date +&quot;%Y-%m-%d&quot;`
# 命令备份
mkdir /root/ssh_bak_`date +&quot;%Y-%m-%d&quot;`/bin/
cp /bin/ssh* /root/ssh_bak_`date +&quot;%Y-%m-%d&quot;`/bin/
cp /usr/sbin/sshd /root/ssh_bak_`date +&quot;%Y-%m-%d&quot;`/bin/
</code></pre>
<p><strong>安装 RPM</strong></p>
<pre><code class="language-bash">rpm -Uivh openssh-*rpm
</code></pre>
<p><strong>查看安装版本</strong></p>
<pre><code class="language-bash">查看版本
ssh -V
OpenSSH_8.6p1, OpenSSL 1.0.2k-fips  26 Jan 2017
查看安装情况
rpm -qa |grep openssh
openssh-8.6p1-1.el7.x86_64
openssh-server-8.6p1-1.el7.x86_64
openssh-askpass-8.6p1-1.el7.x86_64
openssh-clients-8.6p1-1.el7.x86_64
</code></pre>
<p>（可选）<strong>恢复配置</strong></p>
<pre><code class="language-bash">cp /root/ssh_bak_`date +&quot;%Y-%m-%d&quot;`/sshd /etc/pam.d/
cp /root/ssh_bak_`date +&quot;%Y-%m-%d&quot;`/sshd_config /etc/ssh/
cat /etc/ssh/sshd_config | grep PermitRootLogin
rm -rf /etc/ssh/ssh_host*key
</code></pre>
<p><strong>重启 sshd 服务</strong></p>
<pre><code class="language-bash">systemctl restart sshd
</code></pre>
<h2 id="常见问题">常见问题</h2>
<p><strong>root 用户无法登录</strong></p>
<pre><code class="language-bash">cat /etc/ssh/sshd_config | grep PermitRootLogin
正常: PermitRootLogin yes
其他均为不正常 需要改为正常
</code></pre>
<p><strong>pam 报错 需要恢复旧 pam 配置文件</strong></p>
<pre><code class="language-bash">cp /root/ssh_bak_`date +&quot;%Y-%m-%d&quot;`/sshd /etc/pam.d/
</code></pre>
<p><strong>以下配置在/etc/ssh/sshd_config 下必须存在</strong></p>
<pre><code class="language-bash">UseDNS no
AddressFamily inet
SyslogFacility AUTHPRIV
PermitRootLogin yes
GSSAPIAuthentication yes
PasswordAuthentication yes
KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://yaoyao.blog/post/hello-gridea/</id>
        <link href="https://yaoyao.blog/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>